services:
  # ───────────────────────────────
  # Next.js Application (Frontend)
  # ───────────────────────────────
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sitora-tour-app
    ports:
      - '3000:3000'
    volumes:
      - media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      cms:
        condition: service_started
    env_file:
      - .env
    environment:
      - DATABASE_URI=postgresql://postgres:sitoratours2024@postgres:5432/sitora_tour
      - NODE_ENV=production
      - NEXT_PUBLIC_BASE_PATH=${NEXT_PUBLIC_BASE_PATH:-}
      - NEXT_PUBLIC_SERVER_URL=${NEXT_PUBLIC_SERVER_URL:-http://45.144.178.238}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://45.144.178.238/api}
    networks:
      - sitora-network
    restart: unless-stopped

  # ───────────────────────────────
  # Payload CMS Backend (API)
  # ───────────────────────────────
  cms:
    image: node:18-alpine
    container_name: sitora-tour-cms
    working_dir: /app
    volumes:
      - .:/app
    command: >
      sh -c "
        corepack enable &&
        corepack prepare pnpm@latest --activate &&
        if [ ! -d node_modules ]; then pnpm install; fi &&
        pnpm payload migrate &&
        pnpm payload run
      "
    ports:
      - '4000:4000'
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PAYLOAD_CONFIG_PATH=src/payload.config.ts
      - DATABASE_URI=postgresql://postgres:sitoratours2024@postgres:5432/sitora_tour
      - PAYLOAD_SECRET=${PAYLOAD_SECRET:-supersecret}
      - PAYLOAD_PUBLIC_SERVER_URL=http://45.144.178.238
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sitora-network
    restart: unless-stopped

  # ───────────────────────────────
  # PostgreSQL Database
  # ───────────────────────────────
  postgres:
    image: postgres:16-alpine
    container_name: sitora-tour-db
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: sitora_tour
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: '-E UTF8 --locale=en_US.UTF-8'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sitora-network

  # ───────────────────────────────
  # PgAdmin (optional)
  # ───────────────────────────────
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sitora-tour-pgadmin
    restart: unless-stopped
    ports:
      - '5050:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@sitoratours.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - sitora-network
    profiles:
      - tools

# ───────────────────────────────
# Shared Network & Volumes
# ───────────────────────────────
networks:
  sitora-network:
    driver: bridge

volumes:
  pgdata:
    driver: local
  media:
    driver: local
  pgadmin:
    driver: local
